// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 15.0.0.0
//  
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code neu generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace LamestWebserver.WebServices.Generators
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class WebServiceTemplate : WebServiceTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nnamespace ");
            
            #line 7 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tusing global::System;\r\n    using global::System.Collections.Generic;\r\n\tusin" +
                    "g global::LamestWebserver.WebServices;\r\n\tusing global::LamestWebserver;\r\n\tusing " +
                    "global::LamestWebserver.Core;\r\n\r\n    public class ");
            
            #line 15 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl : ");
            
            #line 15 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\t");
            
            #line 17 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 if(ClassType.GetConstructor(new Type[0]) != null) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 18 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl() : base()\r\n\t\t{\r\n\t\t\tLamestWebserver.Core.Logger.Information(\"");
            
            #line 20 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl has been initialized.\");\r\n\t\t}\r\n\t\t");
            
            #line 22 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 24 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 foreach(var method in ClassType.GetMethods()) 
		{
			if (method.IsVirtual && method.IsPublic && !method.IsAbstract && !method.IsStatic && !method.IsFinal && !method.IsGenericMethod && !method.IsGenericMethodDefinition) 
			{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tpublic override ");
            
            #line 29 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 if(method.ReturnType == typeof(void)) { 
            
            #line default
            #line hidden
            this.Write(" void ");
            
            #line 29 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(" method.ReturnType ");
            
            #line 29 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 29 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.ReturnType.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 29 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(\r\n\t\t\t");
            
            #line 30 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 System.Reflection.ParameterInfo[] parameters = method.GetParameters().ToArray();
			for(int i = 0; i < parameters.Length; i++) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 32 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameters[i].ParameterType.Name));
            
            #line default
            #line hidden
            this.Write(" _p");
            
            #line 32 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 32 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 if (i + 1 < parameters.Length) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 32 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 33 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t)\r\n\t\t\t{\r\n\t\t\t\ttry \r\n\t\t\t\t{\r\n\t\t\t\t\tLamestWebserver.Core.Logger.Trace(Calling metho" +
                    "d \'");
            
            #line 38 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 38 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("\'.\");\r\n\r\n\t\t\t\t\t");
            
            #line 40 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 if(method.ReturnType != typeof(void)) { 
            
            #line default
            #line hidden
            this.Write(" var x = ");
            
            #line 40 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tbase.");
            
            #line 41 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(\r\n\t\t\t\t\t");
            
            #line 42 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 for(int i = 0; i < parameters.Length; i++) 
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t_p");
            
            #line 44 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 44 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 if (i + 1 < parameters.Length) { 
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 44 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 45 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t);\r\n\r\n\t\t\t\t\tLamestWebserver.Core.Logger.Trace(Response from method \'");
            
            #line 48 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 48 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("\' has been received.\");\r\n\r\n\t\t\t\t\t");
            
            #line 50 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 if(method.ReturnType != typeof(void)) { 
            
            #line default
            #line hidden
            this.Write(" return x; ");
            
            #line 50 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t}\r\n\t\t\t\tcatch(Exception e)\r\n\t\t\t\t{\r\n\t\t\t\t\tLamestWebserver.Core.Logger.Error(\"Exc" +
                    "eption in Webservice \'");
            
            #line 54 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 54 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("\'\", e);\r\n\t\t\t\t\tthrow new LamestWebserver.WebServices.RemoteException(\"\"Exception i" +
                    "n Webservice \'");
            
            #line 55 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 55 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("\'\"\", e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t");
            
            #line 59 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
  } 
		}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 62 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 foreach(var property in ClassType.GetProperties()) 
		{
			if(property.GetMethod.IsPublic &&property.SetMethod.IsPublic &&
				!property.GetMethod.IsAbstract && !property.SetMethod.IsAbstract &&
				!property.GetMethod.IsStatic && !property.SetMethod.IsStatic &&
				property.GetMethod.IsVirtual && property.SetMethod.IsVirtual)
			{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\tpublic override ");
            
            #line 70 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t{\r\n\t\t\t\t\tget\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tLamestWebserver.Core.Logger" +
                    ".Trace(Getting property \'");
            
            #line 76 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 76 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\'.\");\r\n\r\n\t\t\t\t\t\t\tvar x = base.");
            
            #line 78 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t\t\t\t\t\tLamestWebserver.Core.Logger.Trace(Response from property \'");
            
            #line 80 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 80 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\' has been received.\");\r\n\r\n\t\t\t\t\t\t\treturn x;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(Exception e)\r\n\t" +
                    "\t\t\t\t\t{\r\n\t\t\t\t\t\t\tLamestWebserver.Core.Logger.Error(\"Exception in Webservice \'");
            
            #line 86 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 86 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".get\'\", e);\r\n\t\t\t\t\t\t\tthrow new LamestWebserver.WebServices.RemoteException(\"Except" +
                    "ion in Webservice \'");
            
            #line 87 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 87 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".get\'\", e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tset\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tLamest" +
                    "Webserver.Core.Logger.Trace(Setting property \'");
            
            #line 94 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 94 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\'.\");\r\n\r\n\t\t\t\t\t\t\tbase.");
            
            #line 96 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n\r\n\t\t\t\t\t\t\tLamestWebserver.Core.Logger.Trace(property \'");
            
            #line 98 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 98 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\' has been set.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(Exception e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tLamestWebs" +
                    "erver.Core.Logger.Error(\"Exception in Webservice \'");
            
            #line 102 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 102 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".set\'\", e);\r\n\t\t\t\t\t\t\tthrow new LamestWebserver.WebServices.RemoteException(\"Except" +
                    "ion in Webservice \'");
            
            #line 103 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("WebServiceGenImpl.");
            
            #line 103 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(".set\'\", e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t");
            
            #line 108 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"
 }
		} 
            
            #line default
            #line hidden
            this.Write("\t}\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 113 "C:\Users\raine\source\repos\LamestWebserver\LamestWebserver\LamestWebserver.WebServices.Generators\WebServiceTemplate.tt"

public string Namespace;
public string ClassName;
public Type ClassType;

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class WebServiceTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
