<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using global::System;
using global::System.Collections.Generic;
using global::LamestWebserver.WebServices;
using global::LamestWebserver;
using global::LamestWebserver.Core;
using global::<#= AssemblyNameSpace #>;

namespace <#= Namespace #>
{
    public class <#= ClassName #>WebServiceGenImpl : <#= ClassName #>
	{
		<# if(ClassType.GetConstructor(new Type[0]) != null) { #>
		public <#= ClassName #>WebServiceGenImpl() : base()
		{
			LamestWebserver.Core.Logger.LogInformation("<#= ClassName #>WebServiceGenImpl has been initialized.");
		}
		<# } #>

		<# foreach(var method in ClassType.GetMethods()) 
		{
			if (method.IsVirtual && method.IsPublic && !method.IsAbstract && !method.IsStatic && !method.IsFinal && !method.IsGenericMethod && !method.IsGenericMethodDefinition) 
			{ #>
			
			public override <# if(method.ReturnType == typeof(void)) { #> void <# } else { #> <#= method.ReturnType #> <# } #> <#= method.Name #>(
			<# System.Reflection.ParameterInfo[] parameters = method.GetParameters().ToArray();
			for(int i = 0; i < parameters.Length; i++) {#>
				<#= parameters[i].ParameterType.Name #> _p<#= i #> <# if (i + 1 < parameters.Length) { #>, <# } #>
			<# } #>
			)
			{
				try 
				{
					LamestWebserver.Core.Logger.LogTrace("Calling method '<#= ClassName #>WebServiceGenImpl.<#= method.Name #>'.");

					<# if(method.ReturnType != typeof(void)) { #> var x = <# } #>
					base.<#= method.Name #>(
					<# for(int i = 0; i < parameters.Length; i++) 
					{#>
						_p<#= i #> <# if (i + 1 < parameters.Length) { #>, <# } #>
					<# } #>
					);

					<# if(method.ReturnType != typeof(void)) { #>
					LamestWebserver.Core.Logger.LogTrace("Response from method '<#= ClassName #>WebServiceGenImpl.<#= method.Name #>' has been received.");
					<# } else { #>
					LamestWebserver.Core.Logger.LogTrace("Method '<#= ClassName #>WebServiceGenImpl.<#= method.Name #>' has been executed.");
					<# } #>

					<# if(method.ReturnType != typeof(void)) { #> return x; <# } #>
				}
				catch(Exception e)
				{
					LamestWebserver.Core.Logger.LogError("Exception in Webservice '<#= ClassName #>WebServiceGenImpl.<#= method.Name #>'.\n" + e.Message);
					throw new LamestWebserver.WebServices.RemoteException("Exception in Webservice '<#= ClassName #>WebServiceGenImpl.<#= method.Name #>'", e);
				}
			}

		<#  } 
		}#>

		<# foreach(var property in ClassType.GetProperties()) 
		{
			if(property.GetMethod != null && property.SetMethod != null &&
				property.GetMethod.IsPublic && property.SetMethod.IsPublic &&
				!property.GetMethod.IsAbstract && !property.SetMethod.IsAbstract &&
				!property.GetMethod.IsStatic && !property.SetMethod.IsStatic &&
				property.GetMethod.IsVirtual && property.SetMethod.IsVirtual)
			{ #>
				
				public override <#= property.PropertyType #> <#= property.Name #>
				{
					get
					{
						try
						{
							LamestWebserver.Core.Logger.LogTrace("Getting property '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>'.");

							var x = base.<#= property.Name #>;

							LamestWebserver.Core.Logger.LogTrace("Response from property '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>' has been received.");

							return x;
						}
						catch(Exception e)
						{
							LamestWebserver.Core.Logger.LogError("Exception in Webservice '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>.get'.\n" + e.Message);
							throw new LamestWebserver.WebServices.RemoteException("Exception in Webservice '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>.get'", e);
						}
					}
					set
					{
						try
						{
							LamestWebserver.Core.Logger.LogTrace("Setting property '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>'.");

							base.<#= property.Name #> = value;

							LamestWebserver.Core.Logger.LogTrace("property '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>' has been set.");
						}
						catch(Exception e)
						{
							LamestWebserver.Core.Logger.LogError("Exception in Webservice '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>.set'", e);
							throw new LamestWebserver.WebServices.RemoteException("Exception in Webservice '<#= ClassName #>WebServiceGenImpl.<#= property.Name #>.set'.\n" + e.Message);
						}
					}
				}

			<# }
		} #>
	}
}

<#+
public string Namespace;
public string ClassName;
public string AssemblyNameSpace;
public Type ClassType;
#>